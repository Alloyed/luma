;; Design notes

;; #varargs {{{

;;; input varargs

;; option A. clojurelike
(define (printf fmt & args)
  (io.write (apply string.format fmt args)))

;; option B. repeat verbatim
(define (printf fmt ...)
  (io.write (fmt:format ...)))

;; option C. racketlike
(define (printf fmt . args)
  (io.write (apply string.format fmt args)))

;;; output varargs/let destructuring

;; option A. don't do anything special
(apply (lambda (a b c) ---) '(:a :b :c))
(define (multiret) (unpack (list :a :b :c)))

;; option B. lamba-list destructuring, turn varargs into lists
(let ((a b c) '(:a :b :c)) ---)
(define (multiret) (list :a :b :c))

;; option C. reader syntax for varargs objects
(let ((#,(a b c) (unpack '(:a :b :c)))) ---)
(define (multiret) #,(:a :b :c))

;; #varargs }}}

;; #reader syntaxes {{{

;; SET IN STONE
(define list '(1 2 3))

(define immutable-vector [1 2 3])

(define immutable-map {:a 1 :b 2 :c 3})

(define form-comment #_)

;; NOT SET IN STONE

(could-be #{} immutable-set lua-table)

(could-be #[] lua-array)

;; #reader syntaxes }}}

;; #modules {{{

;; All modules have to compile down to modern lua convention, ie.

local my_module = {}

local other_module = require 'namespaced.other_module'

my_module.field = "foo"

return my_module

;; things we want to support on top of that though (clojure syntax)
(require 'namespaced.other_module :reload)
(require namespaced.other_module) -- imported as namespaced.other_module
(require '[namespaced.other_module :refer [other-field]])

;; #modules }}}

;; #closure popping {{{

;; The code generator makes closures to turn statements into exprs.
;; for example
(define a (if pred val1 val2))
;; compiles to
local a = ((function() if pred then return val1 else return val2 end)());
;; which works, but introduces an unecessary closure object. It would be faster
;; to special-case this into
local a; if pred then a = val2 else a = val2 end;

;; #closure popping }}}
