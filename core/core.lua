#!/usr/bin/env lua
local reader   = require 'core.reader'
local gen      = require 'core.gen'
local argparse = require 'lib.argparse'
local inspect  = require 'lib.inspect'

local _LUMA_VERSION = "Luma v0.1-snapshot"
local path    = "../lib/?.lua;"

local HELPMSG = [[
Hi I'm a test message
]]

local function pipe()
	local s = io.read('*a')
	print(([=[
--[[Generated by %s]] package.path = %q .. package.path; require('luma.core'); ]=])
	:format(_LUMA_VERSION, path) ..
	gen(reader(s)))
end

local function eval(s)
	local f = loadstring(gen(reader(s)))
	if f then
		f()
	end
end

local function repl(f)
	local buf = ''
	print(([[
	%s
	%s
	Enter a blank line to evaluate.
	CTRL-D to discard expression.
	CTRL-D a second time to exit.
	]]):format(_LUMA_VERSION, _VERSION))
	

	while true do
		io.write(buf == '' and '> ' or '>> ')
		local l = f.read(f, '*l')
		if l == nil then
			io.write('\n')
			buf = ''
		else
			buf = buf .. '\n' .. l
		end

		if l == '' then
			print("EVAL")
			print(buf)
			buf = ''
		end
	end
end

local function main(argv)
	local luma = argparse():description "Luma is a Lisp that compiles to Lua."
	luma:option "-e" "--eval"
		:description "Compile and evaluate a luma string"
	luma:flag "-c" "--compile"
		:description "Compile, don't evaluate, any input."
	luma:flag "-r" "--repl"
		:description "Start a luma REPL."
	luma:option "-o" "--output"
		:description "Put all compiled code into FILE."
	local args = luma:parse(argv)
	print(inspect(args))
	if args.eval then
		eval(args.eval)
	end
	if args.repl then
		repl(io.stdin)
	end
end

return { main = main, pipe = pipe, repl = repl }
