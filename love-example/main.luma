(define vec (require "vec"))

(define lg love.graphics)
(define lk love.keyboard)

(define Ball
  (table :pos (vec 100 100) :size (vec 100 100) :speed 10))

(define (directions speed)
  (alist
    "up"    (vec  0         (- speed))
    "down"  (vec  0         speed)
    "left"  (vec  (- speed) 0)
    "right" (vec  speed     0)))

(define (velocity self dt)
  (define (test-direction direction)
    (if (lk.isDown (car direction))
      (cdr direction)
      (vec 0 0)))
  (+ (:pos self) (apply + (map test-direction (directions (:speed self))))))

(define (Ball:update dt)
  (table-set! self :pos (velocity self dt)))

(define (Ball:draw)
  (let ((pos (:pos self))
        (size (:size self)))
    (lg.rectangle "fill" (car pos) (cdr pos) (car size) (cdr size))))

(define *ball* nil)

(define (love.load)
  (set! *ball* Ball))

(define (love.update dt)
  (*ball*:update dt))

(define (love.draw)
  (*ball*:draw))
